"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customTypeJsonToGraphQLSchema = void 0;

var R = _interopRequireWildcard(require("ramda"));

var _graphql = require("gatsby/graphql");

var _pascalcase = _interopRequireDefault(require("pascalcase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const _generateTypeName = joinChar => (...parts) => ['Prismic', ...parts.map(_pascalcase.default)].join(joinChar);

const generatePublicTypeName = _generateTypeName('');

const generateNamespacedTypeName = _generateTypeName('__'); // Provides the ability to control the return value of Date fields on the
// mocked node. This is required to ensure Gatsby processes the field as a Date
// to provide date arguments like `formatString`.


const GraphQLDate = new _graphql.GraphQLScalarType({
  name: 'Date',
  serialize: R.identity
}); // Provides the ability to control the return value of ImageURL fields on the
// mocked node. This is required to allow setting the image URL when creating
// mock localFile fields.

const GraphQLImageURL = new _graphql.GraphQLScalarType({
  name: 'ImageURL',
  serialize: R.identity
});
const GraphQLPrismicHTML = new _graphql.GraphQLObjectType({
  name: generateNamespacedTypeName('HTML'),
  fields: {
    html: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    text: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    }
  }
});
const GraphQLPrismicGeoPoint = new _graphql.GraphQLObjectType({
  name: generateNamespacedTypeName('GeoPoint'),
  fields: {
    latitude: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLFloat)
    },
    longitude: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLFloat)
    }
  }
});
const GraphQLPrismicEmbed = new _graphql.GraphQLObjectType({
  name: generateNamespacedTypeName('Embed'),
  fields: {
    author_name: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    author_url: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    cache_age: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    embed_url: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    html: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    name: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    provider_name: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    provider_url: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    thumbnail_height: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    thumbnail_url: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    thumbnail_width: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    title: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    type: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    version: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    }
  }
});
const GraphQLPrismicImageDimensions = new _graphql.GraphQLObjectType({
  name: generateNamespacedTypeName('Image', 'Dimensions'),
  fields: {
    width: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLInt)
    },
    height: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLInt)
    }
  }
});
const GraphQLPrismicImage = new _graphql.GraphQLObjectType({
  name: generateNamespacedTypeName('Image'),
  fields: {
    alt: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    copyright: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    dimensions: {
      type: GraphQLPrismicImageDimensions
    },
    url: {
      type: GraphQLImageURL
    }
  }
});
const GraphQLPrismicLink = new _graphql.GraphQLObjectType({
  name: generateNamespacedTypeName('Link'),
  fields: {
    id: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    link_type: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    url: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    target: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    }
  }
}); // Returns a GraphQL type for a given schema field.

const fieldToGraphQLType = (customTypeId, options = {}) => (field, fieldId) => {
  switch (field.type) {
    case 'Color':
    case 'Select':
    case 'Text':
    case 'UID':
      return {
        type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
      };

    case 'StructuredText':
      return {
        type: GraphQLPrismicHTML
      };

    case 'Number':
      return {
        type: new _graphql.GraphQLNonNull(_graphql.GraphQLFloat)
      };

    case 'Date':
    case 'Timestamp':
      return {
        type: new _graphql.GraphQLNonNull(GraphQLDate)
      };

    case 'GeoPoint':
      return {
        type: GraphQLPrismicGeoPoint
      };

    case 'Embed':
      return {
        type: GraphQLPrismicEmbed
      };

    case 'Image':
      return {
        type: GraphQLPrismicImage
      };

    case 'Link':
      return {
        type: GraphQLPrismicLink
      };

    case 'Group':
      const group = R.pipe(R.path(['config', 'fields']), subfields => new _graphql.GraphQLObjectType({
        name: generateNamespacedTypeName('Group', fieldId),
        fields: R.map(fieldToGraphQLType(customTypeId), subfields)
      }))(field);
      return {
        type: new _graphql.GraphQLList(group)
      };

    case 'Slice':
      const {
        sliceZoneId
      } = options;
      const {
        'non-repeat': primaryFields,
        repeat: itemsFields
      } = field;
      const sliceFields = {
        id: {
          type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
        },
        slice_type: {
          type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
        }
      };
      if (!R.isEmpty(primaryFields)) sliceFields.primary = {
        type: new _graphql.GraphQLObjectType({
          name: generateNamespacedTypeName(customTypeId, sliceZoneId, fieldId, 'Primary'),
          fields: R.map(fieldToGraphQLType(customTypeId), primaryFields)
        })
      };
      if (!R.isEmpty(itemsFields)) sliceFields.items = {
        type: new _graphql.GraphQLList(new _graphql.GraphQLObjectType({
          name: generateNamespacedTypeName(customTypeId, sliceZoneId, fieldId, 'Item'),
          fields: R.map(fieldToGraphQLType(customTypeId), itemsFields)
        })) // GraphQL type must match source plugin type.

      };
      const sliceType = new _graphql.GraphQLObjectType({
        name: generatePublicTypeName(customTypeId, sliceZoneId, fieldId),
        fields: sliceFields
      });
      return {
        type: sliceType
      };

    case 'Slices':
      const choiceTypes = R.pipe(R.path(['config', 'choices']), R.mapObjIndexed(fieldToGraphQLType(customTypeId, {
        sliceZoneId: fieldId
      })), R.values, R.map(R.prop('type')))(field);
      const unionType = new _graphql.GraphQLUnionType({
        name: generateNamespacedTypeName(customTypeId, fieldId, 'Slice'),
        types: choiceTypes
      });
      return {
        type: new _graphql.GraphQLList(unionType)
      };

    default:
      console.log(`UNPROCESSED FIELD for type "${field.type}"`);
      return {};
  }
}; // Returns a GraphQL schema generated from a custom type JSON schema.


const customTypeJsonToGraphQLSchema = (customTypeId, json) => {
  const _R$pipe = R.pipe(R.values, R.mergeAll, R.mapObjIndexed(fieldToGraphQLType(customTypeId)))(json),
        {
    uid
  } = _R$pipe,
        dataFields = _objectWithoutProperties(_R$pipe, ["uid"]);

  const fields = {
    dataString: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    first_publication_date: {
      type: new _graphql.GraphQLNonNull(GraphQLDate)
    },
    href: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    id: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    lang: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    last_publication_date: {
      type: new _graphql.GraphQLNonNull(GraphQLDate)
    },
    tags: {
      type: new _graphql.GraphQLList(new _graphql.GraphQLNonNull(_graphql.GraphQLString))
    },
    tags: {
      type: new _graphql.GraphQLList(new _graphql.GraphQLNonNull(_graphql.GraphQLString))
    },
    type: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    data: {
      type: new _graphql.GraphQLObjectType({
        name: generateNamespacedTypeName(customTypeId, 'Data'),
        fields: dataFields
      })
    }
  };
  if (uid) fields.uid = uid; // GraphQL type must match source plugin type.

  const queryType = new _graphql.GraphQLObjectType({
    name: generatePublicTypeName(customTypeId),
    fields
  });
  return new _graphql.GraphQLSchema({
    query: queryType
  });
};

exports.customTypeJsonToGraphQLSchema = customTypeJsonToGraphQLSchema;