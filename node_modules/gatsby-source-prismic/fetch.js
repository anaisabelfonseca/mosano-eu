"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _prismicJavascript = _interopRequireDefault(require("prismic-javascript"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    repositoryName,
    accessToken,
    fetchLinks,
    lang
  }) {
    console.time(`Fetch Prismic data`);
    console.log(`Starting to fetch data from Prismic`);
    const apiEndpoint = `https://${repositoryName}.prismic.io/api/v2`;
    const client = yield _prismicJavascript.default.api(apiEndpoint, {
      accessToken
    }); // Query all documents from client

    const documents = yield pagedGet(client, [], {
      fetchLinks
    }, lang);
    console.timeEnd(`Fetch Prismic data`);
    return {
      documents
    };
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;

function pagedGet(_x2) {
  return _pagedGet.apply(this, arguments);
}

function _pagedGet() {
  _pagedGet = _asyncToGenerator(function* (client, query = [], options = {}, lang = '*', page = 1, pageSize = 100, aggregatedResponse = null) {
    const mergedOptions = _objectSpread({
      lang
    }, options);

    const response = yield client.query(query, _objectSpread({}, mergedOptions, {
      page,
      pageSize
    }));

    if (!aggregatedResponse) {
      aggregatedResponse = response.results;
    } else {
      aggregatedResponse = aggregatedResponse.concat(response.results);
    }

    if (page * pageSize < response.total_results_size) {
      return pagedGet(client, query, options, lang, page + 1, pageSize, aggregatedResponse);
    }

    return aggregatedResponse;
  });
  return _pagedGet.apply(this, arguments);
}