"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onPreExtractQueries = exports.sourceNodes = void 0;

var _fetch = _interopRequireDefault(require("./fetch"));

var _normalize = require("./normalize");

var _nodeHelpers = require("./nodeHelpers");

var _createTemporaryMockNodes = require("./createTemporaryMockNodes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const sourceNodes =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (gatsbyContext, pluginOptions) {
    const {
      actions,
      createNodeId,
      store,
      cache
    } = gatsbyContext;
    const {
      createNode,
      touchNode,
      deleteNode
    } = actions;
    const {
      repositoryName,
      accessToken,
      linkResolver = () => {},
      htmlSerializer = () => {},
      fetchLinks = [],
      lang = '*',
      shouldNormalizeImage = () => true,
      schemas
    } = pluginOptions;
    const {
      documents
    } = yield (0, _fetch.default)({
      repositoryName,
      accessToken,
      fetchLinks,
      lang
    });
    yield (0, _createTemporaryMockNodes.createTemporaryMockNodes)({
      schemas,
      gatsbyContext
    });
    yield Promise.all(documents.map(
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(function* (doc) {
        const Node = (0, _nodeHelpers.createNodeFactory)(doc.type,
        /*#__PURE__*/
        function () {
          var _ref3 = _asyncToGenerator(function* (node) {
            node.dataString = JSON.stringify(node.data);
            node.data = yield (0, _normalize.normalizeFields)({
              value: node.data,
              node,
              linkResolver,
              htmlSerializer,
              nodeHelpers: _nodeHelpers.nodeHelpers,
              createNode,
              createNodeId,
              touchNode,
              store,
              cache,
              shouldNormalizeImage
            });
            return node;
          });

          return function (_x4) {
            return _ref3.apply(this, arguments);
          };
        }());
        const node = yield Node(doc);
        createNode(node);
      });

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }()));
    return;
  });

  return function sourceNodes(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.sourceNodes = sourceNodes;

const onPreExtractQueries =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(function* (gatsbyContext, pluginOptions) {
    const {
      schemas
    } = pluginOptions;
    yield (0, _createTemporaryMockNodes.createTemporaryMockNodes)({
      schemas,
      gatsbyContext
    });
  });

  return function onPreExtractQueries(_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

exports.onPreExtractQueries = onPreExtractQueries;